name: Deploy FastAPI to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 584448014764.dkr.ecr.us-east-2.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      env:
        ECR_REGISTRY: 584448014764.dkr.ecr.us-east-2.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        AWS_REGION: ${{ env.AWS_REGION }}
        QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}
        QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        APP_URL: ${{ secrets.APP_URL }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        UNSTRUCTURED_API_KEY: ${{ secrets.UNSTRUCTURED_API_KEY }}
        UNSTRUCTURED_API_URL: ${{ secrets.UNSTRUCTURED_API_URL }}
        PASSWORD_SECRET_KEY: ${{ secrets.PASSWORD_SECRET_KEY }}
        PASSWORD_HASHING_ALGORITHM: ${{ secrets.PASSWORD_HASHING_ALGORITHM }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
        USER_SERVICE_PORT: ${{ secrets.USER_SERVICE_PORT }}
        CHAT_SERVICE_HOST: ${{ secrets.CHAT_SERVICE_HOST }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        AWS_OPENSEARCH_HOST: ${{ secrets.AWS_OPENSEARCH_HOST }}
        AWS_OPENSEARCH_REGION: ${{ secrets.AWS_OPENSEARCH_REGION }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
        script: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          if docker image inspect $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > /dev/null 2>&1; then
            docker-compose down

            echo "DOCKER_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" > .env
            echo "DOCKER_CONTAINER_NAME=$ECR_REPOSITORY" >> .env
            echo "QDRANT_API_URL=$QDRANT_API_URL" >> .env
            echo "QDRANT_API_KEY=$QDRANT_API_KEY" >> .env
            echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
            echo "APP_URL=$APP_URL" >> .env
            echo "ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY" >> .env
            echo "UNSTRUCTURED_API_KEY=$UNSTRUCTURED_API_KEY" >> .env
            echo "UNSTRUCTURED_API_URL=$UNSTRUCTURED_API_URL" >> .env
            echo "PASSWORD_SECRET_KEY=$PASSWORD_SECRET_KEY" >> .env
            echo "PASSWORD_HASHING_ALGORITHM=$PASSWORD_HASHING_ALGORITHM" >> .env
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN
            echo "USER_SERVICE_PORT=$USER_SERVICE_PORT" >> .env
            echo "CHAT_SERVICE_HOST=$CHAT_SERVICE_HOST" >> .env
            echo "DATABASE_URL=$DATABASE_URL" >> .env
            echo "AWS_OPENSEARCH_HOST=$AWS_OPENSEARCH_HOST" >> .env
            echo "AWS_OPENSEARCH_REGION=$AWS_OPENSEARCH_REGION" >> .env

            docker-compose up -d

            echo "Deployment completed. Container logs:"
            docker-compose logs -f
          else
            echo "Image not found in ECR. Deployment failed."
          fi

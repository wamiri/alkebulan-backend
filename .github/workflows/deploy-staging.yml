# name: Deploy FastAPI to EC2

# on:
#   push:
#     branches:
#       - main 

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Docker
#       uses: docker/setup-buildx-action@v2
    
#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v2
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.AWS_REGION }}

#     - name: Login to AWS ECR
#       uses: aws-actions/amazon-ecr-login@v1
#       with:
#         region: ${{ secrets.AWS_REGION }}
#       env:
#         region: ${{ secrets.AWS_REGION }}

#     - name: Build, tag and push Docker image to ECR
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         QDRANT_API_URL: ${{ secrets.QDRANT_API_URL }}
#         QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
#         OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#         ECR_REGISTRY: 584448014764.dkr.ecr.us-east-2.amazonaws.com
#         ECR_REPOSITORY: rag-api
#         IMAGE_TAG: ${{ github.sha }}

#     - name: SSH to EC2 and deploy
#       env:
#         ECR_REGISTRY: 584448014764.dkr.ecr.us-east-2.amazonaws.com
#         ECR_REPOSITORY: rag-api
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY }} ubuntu@${{ secrets.EC2_HOST }} << EOF
#           docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker stop rag-api || true
#           docker rm rag-api || true
#           docker run -d -p 80:8000 --name rag-api $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker image prune -f
#         EOF

name: Deploy FastAPI to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ec2 send-command \
          --instance-ids ${{ env.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters commands=[
            "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY",
            "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
            "docker stop rag-api || true",
            "docker rm rag-api || true",
            "docker run -d --name rag-api -p 80:8000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            "docker image prune -f"
          ]